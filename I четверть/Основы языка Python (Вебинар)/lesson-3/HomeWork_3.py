'''
Практическое задание
1: Создайте функцию, принимающую на вход имя, возраст и город проживания человека. Функция должна возвращать строку вида «Василий, 21 год(а), проживает в городе Москва»
2: Создайте функцию, принимающую на вход 3 числа и возвращающую наибольшее из них.
3: Давайте опишем пару сущностей player и enemy через словарь, который будет иметь ключи и значения:
name - строка полученная от пользователя,
health = 100,
damage = 50. ### Поэкспериментируйте с значениями урона и жизней по желанию. ### Теперь надо создать функцию attack(person1, person2). Примечание: имена аргументов можете указать свои. ### Функция в качестве аргумента будет принимать атакующего и атакуемого. ### В теле функция должна получить параметр damage атакующего и отнять это количество от health атакуемого. Функция должна сама работать со словарями и изменять их значения.
4: Давайте усложним предыдущее задание. Измените сущности, добавив новый параметр - armor = 1.2 (величина брони персонажа)
Теперь надо добавить новую функцию, которая будет вычислять и возвращать полученный урон по формуле damage / armor
Следовательно, у вас должно быть 2 функции:
Наносит урон. Это улучшенная версия функции из задачи 3.
Вычисляет урон по отношению к броне.

Примечание. Функция номер 2 используется внутри функции номер 1 для вычисления урона и вычитания его из здоровья персонажа.
'''

'''
1: Создайте функцию, принимающую на вход имя, возраст и город проживания человека. 
Функция должна возвращать строку вида «Василий, 21 год(а), проживает в городе Москва»
'''
'''
def f_concatinate(par_name, par_age, par_place):
    return par_name + ', ' + par_age + ' год(а), проживает в городе ' + par_place

var_name = input('Имя: ')
var_age = input('Возраст: ')
var_place = input('Место рождения: ')

print(f_concatinate(var_name, var_age, var_place))
'''


'''
2: Создайте функцию, принимающую на вход 3 числа и возвращающую наибольшее из них.
'''

'''
def f_custom_max(*args):
    return max(args)

var_01 = int(input('Первое число: '))
var_02 = int(input('Второе число: '))
var_03 = int(input('Третье число: '))

print(f_custom_max(var_01, var_02, var_03))
'''

'''
3: Давайте опишем пару сущностей player и enemy через словарь, который будет иметь ключи и значения:
name - строка полученная от пользователя,
health = 100,
damage = 50. ### Поэкспериментируйте с значениями урона и жизней по желанию. 
### Теперь надо создать функцию attack(person1, person2). Примечание: имена аргументов можете указать свои. 
### Функция в качестве аргумента будет принимать атакующего и атакуемого. 
### В теле функция должна получить параметр damage атакующего и отнять это количество от health атакуемого. 
Функция должна сама работать со словарями и изменять их значения.
'''

'''
def f_attac(assaulter, defending):
    defending['health'] -= assaulter['damage']
    return defending

enemy = {"name" : "Goblin", "health" : 100, "damage": 15}
human = {"name" : "Lord", "health" : 85, "damage": 10}

assaulter = human
defending = enemy

while enemy['health'] > 0 and human['health'] > 0:
    enemy = f_attac(assaulter, defending)
    tmp = assaulter
    assaulter = defending
    defending = tmp

print(defending)
'''
'''
4: Давайте усложним предыдущее задание. Измените сущности, добавив новый параметр - armor = 1.2 (величина брони персонажа)
Теперь надо добавить новую функцию, которая будет вычислять и возвращать полученный урон по формуле damage / armor
Следовательно, у вас должно быть 2 функции:
Наносит урон. Это улучшенная версия функции из задачи 3.
Вычисляет урон по отношению к броне.

Примечание. Функция номер 2 используется внутри функции номер 1 для вычисления урона и вычитания его из здоровья персонажа.
'''
def f_damage(damage, armor):
    return damage / armor

def f_attac(assaulter, defending):
    defending['health'] -= f_damage(assaulter['damage'], defending['armor'])
    return defending

enemy = {"name" : "Goblin", "health" : 100, "damage": 15, "armor" : 1.5}
human = {"name" : "Lord", "health" : 85, "damage": 10, "armor" : 1.2}

assaulter = human
defending = enemy

while enemy['health'] > 0 and human['health'] > 0:
    enemy = f_attac(assaulter, defending)
    print(defending)
    tmp = assaulter
    assaulter = defending
    defending = tmp

print(f'winner:{defending}')